package plugins.warnings.assertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.jenkinsci.test.acceptance.plugins.warnings.white_mountains.AbstractIssuesTableRow;
import org.jenkinsci.test.acceptance.plugins.warnings.white_mountains.IssuesTable;

/**
 * Abstract base class for {@link IssuesTable} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractIssuesTableAssert<S extends AbstractIssuesTableAssert<S, A>, A extends IssuesTable>
        extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractIssuesTableAssert}</code> to make assertions on actual IssuesTable.
     *
     * @param actual
     *         the IssuesTable we want to make assertions on.
     */
    protected AbstractIssuesTableAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual IssuesTable's headerSize is equal to the given one.
     *
     * @param headerSize
     *         the given headerSize to compare the actual IssuesTable's headerSize to.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         - if the actual IssuesTable's headerSize is not equal to the given one.
     */
    public S hasHeaderSize(int headerSize) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting headerSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualHeaderSize = actual.getHeaderSize();
        if (actualHeaderSize != headerSize) {
            failWithMessage(assertjErrorMessage, actual, headerSize, actualHeaderSize);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's headers contains the given String elements.
     *
     * @param headers
     *         the given elements that should be contained in actual IssuesTable's headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers does not contain all given String elements.
     */
    public S hasHeaders(String... headers) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (headers == null) {
            failWithMessage("Expecting headers parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getHeaders(), headers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's headers contains the given String elements in Collection.
     *
     * @param headers
     *         the given elements that should be contained in actual IssuesTable's headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers does not contain all given String elements.
     */
    public S hasHeaders(java.util.Collection<? extends String> headers) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (headers == null) {
            failWithMessage("Expecting headers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getHeaders(), headers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's headers contains <b>only</b> the given String elements and nothing else in
     * whatever order.
     *
     * @param headers
     *         the given elements that should be contained in actual IssuesTable's headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers does not contain all given String elements.
     */
    public S hasOnlyHeaders(String... headers) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (headers == null) {
            failWithMessage("Expecting headers parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getHeaders(), headers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's headers contains <b>only</b> the given String elements in Collection and
     * nothing else in whatever order.
     *
     * @param headers
     *         the given elements that should be contained in actual IssuesTable's headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers does not contain all given String elements.
     */
    public S hasOnlyHeaders(java.util.Collection<? extends String> headers) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (headers == null) {
            failWithMessage("Expecting headers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getHeaders(), headers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's headers does not contain the given String elements.
     *
     * @param headers
     *         the given elements that should not be in actual IssuesTable's headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers contains any given String elements.
     */
    public S doesNotHaveHeaders(String... headers) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (headers == null) {
            failWithMessage("Expecting headers parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getHeaders(), headers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's headers does not contain the given String elements in Collection.
     *
     * @param headers
     *         the given elements that should not be in actual IssuesTable's headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers contains any given String elements.
     */
    public S doesNotHaveHeaders(java.util.Collection<? extends String> headers) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (headers == null) {
            failWithMessage("Expecting headers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getHeaders(), headers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable has no headers.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's headers is not empty.
     */
    public S hasNoHeaders() {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have headers but had :\n  <%s>";

        // check
        if (actual.getHeaders().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getHeaders());
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's size is equal to the given one.
     *
     * @param size
     *         the given size to compare the actual IssuesTable's size to.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         - if the actual IssuesTable's size is not equal to the given one.
     */
    public S hasSize(int size) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualSize = actual.getSize();
        if (actualSize != size) {
            failWithMessage(assertjErrorMessage, actual, size, actualSize);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's tableRows contains the given AbstractIssuesTableRow elements.
     *
     * @param tableRows
     *         the given elements that should be contained in actual IssuesTable's tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows does not contain all given AbstractIssuesTableRow elements.
     */
    public S hasTableRows(AbstractIssuesTableRow... tableRows) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractIssuesTableRow varargs is not null.
        if (tableRows == null) {
            failWithMessage("Expecting tableRows parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getTableRows(), tableRows);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's tableRows contains the given AbstractIssuesTableRow elements in
     * Collection.
     *
     * @param tableRows
     *         the given elements that should be contained in actual IssuesTable's tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows does not contain all given AbstractIssuesTableRow elements.
     */
    public S hasTableRows(java.util.Collection<? extends AbstractIssuesTableRow> tableRows) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractIssuesTableRow collection is not null.
        if (tableRows == null) {
            failWithMessage("Expecting tableRows parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getTableRows(), tableRows.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's tableRows contains <b>only</b> the given AbstractIssuesTableRow elements
     * and nothing else in whatever order.
     *
     * @param tableRows
     *         the given elements that should be contained in actual IssuesTable's tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows does not contain all given AbstractIssuesTableRow elements.
     */
    public S hasOnlyTableRows(AbstractIssuesTableRow... tableRows) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractIssuesTableRow varargs is not null.
        if (tableRows == null) {
            failWithMessage("Expecting tableRows parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getTableRows(), tableRows);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's tableRows contains <b>only</b> the given AbstractIssuesTableRow elements
     * in Collection and nothing else in whatever order.
     *
     * @param tableRows
     *         the given elements that should be contained in actual IssuesTable's tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows does not contain all given AbstractIssuesTableRow elements.
     */
    public S hasOnlyTableRows(java.util.Collection<? extends AbstractIssuesTableRow> tableRows) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractIssuesTableRow collection is not null.
        if (tableRows == null) {
            failWithMessage("Expecting tableRows parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getTableRows(), tableRows.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's tableRows does not contain the given AbstractIssuesTableRow elements.
     *
     * @param tableRows
     *         the given elements that should not be in actual IssuesTable's tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows contains any given AbstractIssuesTableRow elements.
     */
    public S doesNotHaveTableRows(AbstractIssuesTableRow... tableRows) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractIssuesTableRow varargs is not null.
        if (tableRows == null) {
            failWithMessage("Expecting tableRows parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getTableRows(), tableRows);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable's tableRows does not contain the given AbstractIssuesTableRow elements in
     * Collection.
     *
     * @param tableRows
     *         the given elements that should not be in actual IssuesTable's tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows contains any given AbstractIssuesTableRow elements.
     */
    public S doesNotHaveTableRows(java.util.Collection<? extends AbstractIssuesTableRow> tableRows) {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // check that given AbstractIssuesTableRow collection is not null.
        if (tableRows == null) {
            failWithMessage("Expecting tableRows parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getTableRows(), tableRows.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IssuesTable has no tableRows.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         if the actual IssuesTable's tableRows is not empty.
     */
    public S hasNoTableRows() {
        // check that actual IssuesTable we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have tableRows but had :\n  <%s>";

        // check
        if (actual.getTableRows().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getTableRows());
        }

        // return the current assertion for method chaining
        return myself;
    }

}
