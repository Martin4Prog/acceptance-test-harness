package plugins.warnings.assertions;

import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.jenkinsci.test.acceptance.plugins.warnings.white_mountains.DryIssuesTableRow;

/**
 * Abstract base class for {@link DryIssuesTableRow} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractDryIssuesTableRowAssert<S extends AbstractDryIssuesTableRowAssert<S, A>, A extends DryIssuesTableRow> extends
        AbstractAbstractNonDetailsIssuesTableRowAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractDryIssuesTableRowAssert}</code> to make assertions on actual DRYIssuesTableRow.
   * @param actual the DRYIssuesTableRow we want to make assertions on.
   */
  protected AbstractDryIssuesTableRowAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's age is equal to the given one.
   * @param age the given age to compare the actual DRYIssuesTableRow's age to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DRYIssuesTableRow's age is not equal to the given one.
   */
  public S hasAge(int age) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting age of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualAge = actual.getAge();
    if (actualAge != age) {
      failWithMessage(assertjErrorMessage, actual, age, actualAge);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's duplicatedIn contains the given String elements.
   * @param duplicatedIn the given elements that should be contained in actual DRYIssuesTableRow's duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn does not contain all given String elements.
   */
  public S hasDuplicatedIn(String... duplicatedIn) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (duplicatedIn == null) failWithMessage("Expecting duplicatedIn parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDuplicatedIn(), duplicatedIn);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's duplicatedIn contains the given String elements in Collection.
   * @param duplicatedIn the given elements that should be contained in actual DRYIssuesTableRow's duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn does not contain all given String elements.
   */
  public S hasDuplicatedIn(java.util.Collection<? extends String> duplicatedIn) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (duplicatedIn == null) {
      failWithMessage("Expecting duplicatedIn parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDuplicatedIn(), duplicatedIn.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's duplicatedIn contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param duplicatedIn the given elements that should be contained in actual DRYIssuesTableRow's duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn does not contain all given String elements.
   */
  public S hasOnlyDuplicatedIn(String... duplicatedIn) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (duplicatedIn == null) failWithMessage("Expecting duplicatedIn parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDuplicatedIn(), duplicatedIn);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's duplicatedIn contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param duplicatedIn the given elements that should be contained in actual DRYIssuesTableRow's duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn does not contain all given String elements.
   */
  public S hasOnlyDuplicatedIn(java.util.Collection<? extends String> duplicatedIn) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (duplicatedIn == null) {
      failWithMessage("Expecting duplicatedIn parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDuplicatedIn(), duplicatedIn.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's duplicatedIn does not contain the given String elements.
   *
   * @param duplicatedIn the given elements that should not be in actual DRYIssuesTableRow's duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn contains any given String elements.
   */
  public S doesNotHaveDuplicatedIn(String... duplicatedIn) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (duplicatedIn == null) failWithMessage("Expecting duplicatedIn parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDuplicatedIn(), duplicatedIn);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's duplicatedIn does not contain the given String elements in Collection.
   *
   * @param duplicatedIn the given elements that should not be in actual DRYIssuesTableRow's duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn contains any given String elements.
   */
  public S doesNotHaveDuplicatedIn(java.util.Collection<? extends String> duplicatedIn) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (duplicatedIn == null) {
      failWithMessage("Expecting duplicatedIn parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDuplicatedIn(), duplicatedIn.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow has no duplicatedIn.
   * @return this assertion object.
   * @throws AssertionError if the actual DRYIssuesTableRow's duplicatedIn is not empty.
   */
  public S hasNoDuplicatedIn() {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have duplicatedIn but had :\n  <%s>";

    // check
    if (actual.getDuplicatedIn().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDuplicatedIn());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual DRYIssuesTableRow's file is equal to the given one.
   * @param file the given file to compare the actual DRYIssuesTableRow's file to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DRYIssuesTableRow's file is not equal to the given one.
   */
  public S hasFile(String file) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting file of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFile = actual.getFileName();
    if (!Objects.areEqual(actualFile, file)) {
      failWithMessage(assertjErrorMessage, actual, file, actualFile);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's lineNumber is equal to the given one.
   * @param lineNumber the given lineNumber to compare the actual DRYIssuesTableRow's lineNumber to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DRYIssuesTableRow's lineNumber is not equal to the given one.
   */
  public S hasLineNumber(int lineNumber) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lineNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualLineNumber = actual.getLineNumber();
    if (actualLineNumber != lineNumber) {
      failWithMessage(assertjErrorMessage, actual, lineNumber, actualLineNumber);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DRYIssuesTableRow's lines is equal to the given one.
   * @param lines the given lines to compare the actual DRYIssuesTableRow's lines to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DRYIssuesTableRow's lines is not equal to the given one.
   */
  public S hasLines(int lines) {
    // check that actual DRYIssuesTableRow we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lines of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualLines = actual.getLines();
    if (actualLines != lines) {
      failWithMessage(assertjErrorMessage, actual, lines, actualLines);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
