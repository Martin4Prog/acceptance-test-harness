package plugins.warnings.assertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.jenkinsci.test.acceptance.plugins.warnings.white_mountains.DetailsTableRow;

/**
 * Abstract base class for {@link DetailsTableRow} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractDetailsTableRowAssert<S extends AbstractDetailsTableRowAssert<S, A>, A extends DetailsTableRow>
        extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractDetailsTableRowAssert}</code> to make assertions on actual DetailsTableRow.
     *
     * @param actual
     *         the DetailsTableRow we want to make assertions on.
     */
    protected AbstractDetailsTableRowAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual DetailsTableRow's details is equal to the given one.
     *
     * @param details
     *         the given details to compare the actual DetailsTableRow's details to.
     *
     * @return this assertion object.
     * @throws AssertionError
     *         - if the actual DetailsTableRow's details is not equal to the given one.
     */
    public S hasDetails(String details) {
        // check that actual DetailsTableRow we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting details of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDetails = actual.getDetails();
        if (!Objects.areEqual(actualDetails, details)) {
            failWithMessage(assertjErrorMessage, actual, details, actualDetails);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
